
import java.awt.*;
import java.awt.event.ComponentEvent;

import javax.swing.JPanel;


public class Flag extends JPanel{
	Flag(){
		setPreferredSize(new Dimension(700,450));
	};
	
	// returns the height of the window
	public int height() {
		int x = getHeight();
		return x;
	}
	
	
	
	
	
	// paints the elements
	 public void paint(Graphics g){
		paintStripes(g, 0);
		paintUnion(g);
		

		for(int x=1; x<=9; x+=2) {
			double offsety = height()*0.054;
			offsety = offsety*x;
			for (int i=1; i<=11; i+=2) {
				double offsetx = height()*0.063;
				offsetx = offsetx*i;
				paintStars(g,offsetx, offsety);
			}
		}
		
		for (int x=2; x<=8; x+=2) {
			double offsety = height()*0.054;
			offsety = offsety*x;
			for (int i=2; i<=10; i+=2) {
				double offsetx = height()*0.063;
				offsetx = offsetx*i;
				paintStars(g, offsetx, offsety);
			}
		}
	 }
	 
	 // paints stripes
	 private void paintStripes(Graphics g, int i) {
		 	// gets the width of the panel
		 	double height = Math.floor(height()/13);
		 	// makes the height always equal the 
		 	int width = (int) Math.floor(height()*1.9);	 	
			g.setColor(Color.red);
			g.fillRect(0, i, width, (int)height);
			g.setColor(Color.white);
			g.fillRect(0, i+(int) height, width, (int) height);
			if(i <= height*13){
				paintStripes(g, i+(int)height*2);
			}
			g.setColor(Color.red);
			g.fillRect(0, (int)height*12, width, (int) height);			
	 }
	 
	 private void paintUnion(Graphics g){
		 double height = Math.floor(height()*7/13);
		 // makes the width always equal to height * union ratio
		 double width = Math.floor(height()*0.76);	 	
		 g.setColor(Color.blue);
		 g.fillRect(0, 0, (int)width, (int)height);
	 }

	 private void paintStars(Graphics g, double offsetx, double offsety){
		 g.setColor(Color.white);
		 double bigRadius = height()*0.0616/2; 
		 double smallRadius = bigRadius/2.618;
		 
		 int[] xcoord = new int[10];
		 int[] ycoord = new int[10];
		 for (int i=0; i<10; i++) {
			 
			if(i%2==0) {
				xcoord[i] = (int) (Math.cos(i*(Math.PI*2)/5+1)*bigRadius + offsetx);
			 	ycoord[i] = (int) (Math.sin(i*(Math.PI*2)/5+1)*bigRadius + offsety);
			} else {
				xcoord[i] = (int) (Math.cos(i*(Math.PI*2)/5)*smallRadius + offsetx);
				ycoord[i] = (int) (Math.sin(i*(Math.PI*2)/5)*smallRadius + offsety);
			}
		 }
		 
		 g.fillPolygon(xcoord, ycoord, xcoord.length);
	 }

}