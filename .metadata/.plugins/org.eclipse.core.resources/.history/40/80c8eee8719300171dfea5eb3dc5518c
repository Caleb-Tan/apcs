
import java.awt.*;
import java.awt.event.ComponentEvent;

import javax.swing.JPanel;


public class Flag extends JPanel{
	Flag(){
		setPreferredSize(new Dimension(700,450));
	};
	
	// returns the height of the window
	public double height() {
		double x = getHeight();
		int y = getWidth();
		if (y/x < 1.9) {
			x = y/1.9;
		}
		return x;
	}
	
	// paints the elements
	 public void paint(Graphics g){
		paintStripes(g);
		paintUnion(g);
		

		for(int x=1; x<=9; x+=2) {
			double offsety = height()*0.054;
			offsety = offsety*x;
			for (int i=1; i<=11; i+=2) {
				double offsetx = height()*0.063;
				offsetx = offsetx*i;
				paintStars(g,offsetx, offsety);
			}
		}
		
		for (int x=2; x<=8; x+=2) {
			double offsety = height()*0.054;
			offsety = offsety*x;
			for (int i=2; i<=10; i+=2) {
				double offsetx = height()*0.063;
				offsetx = offsetx*i;
				paintStars(g, offsetx, offsety);
			}
		}
	 }

	 // paints stripes
	 private void paintStripes(Graphics g) {
		 	// makes the height always equal the width * 1.9
		 	final int width = (int)((height()*1.9));	 	
		 	final int heightStripe = (int)((height()/13));
		 	for (int i=0; i<=12; i++){
		 		int offsety = i*heightStripe;
		 		if (i%2 == 0) {
		 			g.setColor(Color.red);
		 			g.fillRect(0,offsety,width,heightStripe);
		 		} else {
		 			g.setColor(Color.white);
		 			g.fillRect(0,offsety,width,heightStripe);
		 		}
		 	}		
	 }
	 
	 private void paintUnion(Graphics g){
		 double heightStripe = (height()/13);
		 final double height = (height()*7/13);
		 // makes the width always equal to height * union ratio
		 final double width = height*1.9;	 	
		 g.setColor(Color.blue);
		 g.fillRect(0, 0, (int)width, (int)height);
	 }

	 private void paintStars(Graphics g, double offsetx, double offsety){
		 g.setColor(Color.white); 

		 int[] xcoord = new int[10];
		 int[] ycoord = new int[10];
		 for (int i=0; i<10; i++) {
			 double angle = (i-0.5) * (Math.PI*2 / 10);
			 double radius = i % 2 == 0 ? height()*0.0616/2 : (height()*0.0616/2)/2.618;
			 xcoord[i] = (int) (Math.cos(angle)*radius + offsetx);
			 ycoord[i] = (int) (Math.sin(angle)*radius + offsety);
		 }
		 
		 g.fillPolygon(xcoord, ycoord, xcoord.length);
	 }

}